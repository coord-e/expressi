use expression::Expression;
use expression::Operator;

#[pub]
expression -> Expression
  = follow

follow -> Expression
  = l:assign ";" r:follow { Expression::Follow(Box::new(l), Box::new(r)) }
  / assign

assign -> Expression
  = l:identifier "=" r:assign { Expression::Assign(Box::new(l), Box::new(r)) }
  / sum

sum -> Expression
  = l:product op:$("+" / "-") r:sum { Expression::BinOp(Operator::from_str(op), Box::new(l), Box::new(r)) }
  / product

product -> Expression
  = l:atom op:$("*" / "/") r:product { Expression::BinOp(Operator::from_str(op), Box::new(l), Box::new(r)) }
  / atom

atom -> Expression
  = number
  / identifier
  / "(" v:expression ")" { v }

identifier -> Expression
  = n:$([a-zA-Z] [a-zA-Z0-9_]*) { Expression::Identifier(n.to_owned()) }

number -> Expression
  = n:$([0-9]+) { Expression::Number(n.parse().unwrap()) }
