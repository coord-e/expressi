use expression::Expression;
use expression::Operator;

#[pub]
expression -> Expression
  = follow

follow -> Expression
  = l:assign _ ";" _ r:follow { Expression::Follow(Box::new(l), Box::new(r)) }
  / assign

assign -> Expression
  = l:identifier _ "=" _ r:assign { Expression::Assign(Box::new(l), Box::new(r)) }
  / sum

sum -> Expression
  = l:comparison _ op:$("+" / "-") _ r:sum { Expression::BinOp(Operator::from_str(op), Box::new(l), Box::new(r)) }
  / comparison

comparison -> Expression
  = l:product _ op:$("<" / ">" / "<=" / ">=" / "==" / "!=") _ r:comparison { Expression::BinOp(Operator::from_str(op), Box::new(l), Box::new(r)) }
  / product

product -> Expression
  = l:atom _ op:$("*" / "/") _ r:product { Expression::BinOp(Operator::from_str(op), Box::new(l), Box::new(r)) }
  / atom

atom -> Expression
  = number
  / identifier
  / "(" _ v:expression _ ")" { v }

identifier -> Expression
  = n:$([a-zA-Z] [a-zA-Z0-9_]*) { Expression::Identifier(n.to_owned()) }

number -> Expression
  = n:$([0-9]+) { Expression::Number(n.parse().unwrap()) }

_ = [ \t\n]*
